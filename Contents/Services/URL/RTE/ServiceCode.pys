RTE_SWF = 'http://www.rte.ie/static/player/swf/osmf2_2012_10_19.swf'

####################################################################################################
def NormalizeURL(url):
    return url

####################################################################################################
def MetadataObjectForURL(url):
    
    feed = RSS.FeedFromURL(url)
    
    title = feed.entries[0].title
    desc = feed.entries[0].description
    duration = int(feed.entries[0].rte_duration['ms'])
    thumb = feed.entries[0].media_thumbnail['url']
    link = feed.entries[0].link
    
    return VideoClipObject(
        url=link, 
        title=title, 
        summary=desc, 
        duration=duration, 
        thumb=thumb)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [PartObject(key=Callback(PlayVideo, url=url))],
			)
	]

####################################################################################################
@indirect
def PlayVideo(url):
    feed = RSS.FeedFromURL(url)
    found = False
    i = 0
    rtmp_url = ''
    playpath = ''

    while not found:
        content_type = feed.entries[0].media_content[i]['rte:format']
        if content_type == "content":
            rtmp_parts = (feed.entries[0].media_content[i]['url']).split('mp4:')
            rtmp_url = rtmp_parts[0]
            playpath = 'MP4:' + rtmp_parts[1]
            found = True
        else:
            i = i+1
            pass

    return IndirectResponse(VideoClipObject, key=RTMPVideoURL(url=rtmp_url, clip=playpath, swf_url=RTE_SWF))
